package com.sdq.libs.base.arch

/**
 *
 * @PackageName com.sdq.libs.base. arch
 * @date 2022/7/25 14:29
 * @author songdongqi
 */
class Mvi {
    /**
     * 界面层由以下两部分组成：
    在屏幕上呈现数据的界面元素。您可以使用 View 或 Jetpack Compose 函数构建这些元素。
    用于存储数据、向界面提供数据以及处理逻辑的状态容器（如 ViewModel 类）。
    “界面”这一术语是指用于显示数据的 activity 和 fragment 等界面元素，无论它们使用哪个 API（Views 还是 Jetpack Compose）来显示数据。
    由于数据层的作用是存储和管理应用数据，以及提供对应用数据的访问权限，因此界面层必须执行以下步骤：

    使用应用数据，并将其转换为界面可以轻松呈现的数据。
    使用界面可呈现的数据，并将其转换为用于向用户呈现的界面元素。
    使用来自这些组合在一起的界面元素的用户输入事件，并根据需要反映它们对界面数据的影响。
    根据需要重复第 1-3 步。
    本指南的其余部分展示了如何实现用于执行这些步骤的界面层。具体来说，本指南涵盖以下任务和概念：

    如何定义界面状态。
    单向数据流 (UDF)，作为提供和管理界面状态的方式。
    如何根据 UDF 原则使用可观察数据类型公开界面状态。
    如何实现使用可观察界面状态的界面。
    其中最基本的便是定义界面状态。

    UI elements + UI State = UI
    状态向下流动、事件向上流动的这种模式称为单向数据流 (UDF)。这种模式对应用架构的影响如下：

    ViewModel 会存储并公开界面要使用的状态。界面状态是经过 ViewModel 转换的应用数据。
    界面会向 ViewModel 发送用户事件通知。
    ViewModel 会处理用户操作并更新状态。
    更新后的状态将反馈给界面以进行呈现。
    系统会对导致状态更改的所有事件重复上述操作。

    代码库类负责以下任务：
    向应用的其余部分提供数据。
    对数据进行集中更改。
    解决多个数据源之间的冲突。
    从应用的其余部分中提取数据源。
    包含业务逻辑。

    该层中的类通常称为用例或交互方。每个用例都应仅负责单个功能。例如，如果多个 ViewModel 依赖时区在屏幕上显示适当的消息，则您的应用可能具有 GetTimeZoneUseCase 类。
     */
}